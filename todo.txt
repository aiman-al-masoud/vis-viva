USE CASE 1:

Player accesses web-app, on sign-up/login screen.

After sign-up/login, player is taken to main menu.

Main Menu:
-> Challenge Player (takes you to ChallengePlayer)

Challenge Player has (at least):
-> an "input user name" button
-> a "send invite" button

Extras:
-> random challenger button

Once a challenge is sent, the challenger is taken to the BattleField and can field his troops then click on ready when he's done

The challenged player (if online) is shown a notification and asked to go to the BattleField, he can field his troops, and click on ready when he's done.

Once both players have clicked on 'ready', the challenge can start, and the attacker gets the first turn.


VIEWS:

# LoginSignup
# MainMenu
# PrepareBattleField
# FightBattleField

CLASSES

# App 

Root of everything, handles events (both inbound and outbound).
Sprites (and other components) and Server issue events, App alone acts on events.
All graphical updates are triggered by App, based on the relevant events.
App modifies the Game object (passed down to all children of App).


# Game 
stores information on the current game, edited in App by means of events and callbacks, passed down to all child elements of App that need it.

More specifically, it stores:

current game's id
challenger
defender
updated player's battle units' disposition
updated opponent's battle units' disposition


# HalfChessboard

select(squareId): void //select a square on the grid

getSelected(): BattleUnit //get the battle unit on the selected square

setSelected(battleUnit): void //set the battle unit on the selected square
 
drop(squareId) : void  //remove battle unit (if any) from selected square


# BattleUnit

a sprite with a toJson method for the purpose of 'serialization' and api-communication.

hit(fireEvent) : void // decreases the health of the battle unit if conditions are met 


# PrepareBattleField

(view) editable, allows player to place units on his squares.

contains a single HalfChessboard.


# FightBattleField

(view) non-editable, just has the commands necessary to play

comprises two HalfChessboards

# Server

# Events


DATABASE:

Player{
username : str,
password : str,
credits : int,
experience : int,
}


use tinydb:
https://pypi.org/project/tinydb/
